the first thing to learn is fluent api style.

the style of programming when you call the class or variable itself. one example:


  var student = new Student();
             student.Greet("Daniel").Greet("Teste1").Greet("Teste2");
             student.Greet("Mousse");
             student.Greet("Student3");

            System.Console.WriteLine("Daniel in quotes".Quote());
 public class Student
    {
        public void Greet(string name, string first)
        {
            System.Console.WriteLine($"Hello {name}");
        }

        public Student Greet(string name)
        {
            System.Console.WriteLine($"Hello, {name}");
            return this;

        }

    }

2. Extension method explanation:
- declare a static method in a static class, and
- use the this modifier to modify the first parameter of the static method.
- The type of the first parameter will be the target type this extension method attaches to.
- When calling the extension method, we don't need to provide argument for the first parameter,
since the C# compiler will treat the caller of the extension method as the argument for the 
first argument.

--------------------------------------------------------------------------------------------------------
The standard query operators part 1

Filtering operators:

'Where method' from linq has two syntaxes sql syntax and fluent api syntax.

the first example is fluent api syntax:

    var records = DataLoader.Load(@"C:\Projects");
    var femaleTop10 = records
        .Where(r => r.Gender == Gender.Female && r.Rank <= 10);

    var maleTop10 = records.Where(Filter);

    foreach (var r in femaleTop10)
        System.Console.WriteLine(r);

the lambda expression could be changed for a method that return the boolean value example, the :

bool Filter(Record r) {
    if (r.Gender == Gender.Male && r.Rank <= 10) {
        return true;
    } else {
        return false;
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////

'Oftype Operator'

the oftype method help us to pick out the child type that we want example:

    var objects = new Object[] { 1, 10L, 1.1, 1.1f, "Hello", 2, 3 };
    var result = objects.OfType<int>();
    foreach (var item in result) {
        System.Console.WriteLine(item);
    }

////////////////////////////////////////////////////////////////////////////////////////////////

Quantifiers operators:

'All operator'

the all operator determines whether all elements in a colletion satisfy a condition. Example:

    var records = DataLoader.Load(@"C:\Projects");
    var result = records.All(r => r.Name.Length > 3);
    System.Console.WriteLine(result);

////////////////////////////////////////////////////////////////////////////////////////////////

'Any Operator'

The any operator determines whether at least one element satisfy the condition, example:

    var records = DataLoader.Load(@"C:\Projects");
    var result = records.Any(r => r.Name.Length > 15);
    System.Console.WriteLine(result);

////////////////////////////////////////////////////////////////////////////////////////////////

'Contains Opperator'

The Contains operator determines whether a collection contains a specified element. example:

 int[] integers = { 100, 200, 300, 400, 500 };
    string[] strings = { "Tim", "Tom", "Rina", "Andrew" };
    var result1 = integers.Contains(200);
    var result2 = strings.Contains("Tim");
    System.Console.WriteLine($"{result1} {result2}");

One warning when for compare objects should use the comparer contains

class RecordComparer : IEqualityComparer<Record> {
    public bool Equals(Record x, Record y) {
        return x.Name == y.Name && x.Gender == y.Gender && x.Rank == y.Rank;
    }

    public int GetHashCode(Record obj) {
        return obj.GetHashCode();
    }
}


 var records = DataLoader.Load(@"C:\Projects");
    var record = new Record("Timothy", Gender.Male, 38);
    var result = records.Contains(record, new RecordComparer());
    System.Console.WriteLine(result);

////////////////////////////////////////////////////////////////////////////////////////////////

'Set Operations'

Distinct - Keeps unique elements of the collection and removes duplicate elements
Intersect - Returns the set intersection, which means elements that appear in each of two collections
Except - Returns the set difference, which means the elements of one collection that do not appear in a second collection
Union - Returns the set union, which means unique elements that appear in either of two collections
All these four operators do not have query expression (SQL-like) keywords.

examples:

var records = DataLoader.Load(@"C:\Projects");
    int[] left = { 1, 1, 2, 3, 3, 4, 4 };
    int[] right = { 3, 4, 5, 6 };

    var distinctResult = left.Distinct();
    var intersectResult = left.Intersect(right);
    var exceptResult = left.Except(right);
    var unionResult = left.Union(right);

    Console.WriteLine($"Distinct: {string.Join(",", distinctResult)}"); // 1, 2, 3, 4
    Console.WriteLine($"Intersect: {string.Join(",", intersectResult)}"); // 3, 4
    Console.WriteLine($"Except: {string.Join(",", exceptResult)}"); // 1, 2
    Console.WriteLine($"Union: {string.Join(",", unionResult)}"); // 1, 2, 3, 4, 5, 6


///////////////////////////////////////////////////////////////////////////////////////////////

'Concatenation operator'

Concatenation refers to the operation of appending one collection to another. 
There is only one operator Concat in this group. If you are familiar with the List<T> class,
 the Concat method's function is similar to the AddRange method.
 
 example:

  int[] array1 = { 1, 2, 3, 4, 5 };
    int[] array2 = { 3, 4, 5, 6, 7 };

    var concatResult = array1.Concat(array2); // 1,2,3,4,5,3,4,5,6,7
    var unionResult = array1.Union(array2); // 1,2,3,4,5,6,7

    System.Console.WriteLine($"Concat: {string.Join(",", concatResult)}");
    System.Console.WriteLine($"Union: {string.Join(",", unionResult)}");

///////////////////////////////////////////////////////////////////////////////////////////////

'Sort operators'

A sorting operation orders the elements of a sequence based on one or more attributes. This group of operators include:

OrderBy - Sorts values in ascending order.
ThenBy - Performs a secondary sort in ascending order.
OrderByDescending - Sorts values in descending order.
ThenByDescending - Performs a secondary sort in descending order.
Reverse - Reverses the order of the elements in a collection.

Except for Reverse, all other four operators have their query expression syntax, which you will see in the code examples.

orderby example:
var records = DataLoader.Load(@"C:\Projects");
    var sortedByRank = records.OrderBy(r => r.Rank); // fluent api
    var sortedByRank = from r in records orderby r.Rank select r; // sql-like syntax
    foreach (var r in sortedByRank) {
        System.Console.WriteLine(r.ToString());
    }

orderbydescending example:

 var records = DataLoader.Load(@"C:\Projects");
    var sortedByRank = records.OrderByDescending(r => r.Rank); // fluent api
      var sortedByRank = from r in records orderby r.Rank descending select r; // sql-like syntax
    foreach (var r in sortedByRank) {
        System.Console.WriteLine(r.ToString());
    }

thenby example:

var records = DataLoader.Load(@"C:\Projects");
    var sortedByRank = records.OrderBy(r => r.Rank).ThenBy(r => r.Name); //fluent api
    var sortedByRank = from r in records orderby r.Rank, r.Name select r; // sql-like syntax
    foreach (var r in sortedByRank) {
        System.Console.WriteLine(r.ToString());
    }

thenbydescending example:

var sortedByRank = records.OrderBy(r=>r.Rank).ThenByDescending(r=>r.Name); //fluent api
var sortedByRank = from r in records orderby r.Rank, r.Name descending select r; // sql-like syntax

reverse example:

    var records = DataLoader.Load(@"C:\Projects");
    int[] original = { 1979, 10, 31, 8, 15 };
    var reversed = original.Reverse();
    System.Console.WriteLine($"Original: {string.Join(",", original)}");
    System.Console.WriteLine($"Reversed: {string.Join(",", reversed)}");


custom sorting example

class RecordComparer : IComparer<Record> {
    public int Compare(Record x, Record y) {
        if (x.Rank < y.Rank) {
            return -1;
        } else if (x.Rank > y.Rank) {
            return 1;
        }

        if (x.Gender < y.Gender) {
            return -1;
        } else if (x.Gender > y.Gender) {
            return 1;
        }

        return String.Compare(x.Name, y.Name);
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------

'Projection (Transformation) Operations'

Select operator, the select operator pick one property or get your expression and transform in a new collection. example:

    var records = DataLoader.Load(@"C:\Projects");
    var names = records.Select(r => r.Name); //fluent api
    var names = from r in records select r.Name; // sql-like syntax

    foreach (var n in names) {
        System.Console.WriteLine(n);


Sometimes we need to pick more than one property value from the source data elements to generate the result collection, example:

Solution 1: Strongly-Typed Result Object

 class RankAndName {
        public int Rank { get; set; }
        public string Name { get; set; }
    }

    class Program {
        static void Main(string[] args) {
            var records = DataLoader.Load(@"C:\Projects");
            var items = records.Select(r => new RankAndName { Rank = r.Rank, Name = r.Name });
            var items = from r in records select new RankAndName { Rank = r.Rank, Name = r.Name }; // sql like syntax
            foreach (var item in items) {
                System.Console.WriteLine($"Rank:{item.Rank} Name:{item.Name}");
            }
        }
    }

Solution 2: Anonymous Type Result Object

 var records = DataLoader.Load(@"C:\Projects");
    var items = records.Select(r => new { Rank = r.Rank, Name = r.Name }); // fluent api
    var items = from r in records select new { Rank = r.Rank, Name = r.Name };
    foreach (var item in items) {
        // System.Console.WriteLine(item.GetType());
        System.Console.WriteLine($"Rank:{item.Rank} Name:{item.Name}");
    }

    Solution 3: Tuple Type Result Object
    after c# 7.0

    var records = DataLoader.Load(@"C:\Projects");
    var items = records.Select(r => (r.Rank, r.Name)); // fluent api
    var items = from r in records select (r.Rank, r.Name);// sql like syntax
    foreach (var item in items) {
        // System.Console.WriteLine(item.GetType());
        System.Console.WriteLine($"Rank:{item.Rank} Name:{item.Name}");
    }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

'SelectMany Operator' 

What I Understand is when you want get values from a list from list;

example:

var records = DataLoader.Load(@"C:\Users\dferresi\Documents\DataQueryingUsingLINQandC\");
            var dict = new Dictionary<string, IEnumerable<Record>>();
            dict["FemaleTop5"] = records.Where(r => r.Rank <= 5 && r.Gender == Gender.Female);
            dict["MaleTop5"] = records.Where(r => r.Rank <= 5 && r.Gender == Gender.Male);

            // Solution 1:
            var names1 = new List<string>();
            var selectResult = dict.Select(kvp => kvp.Value);
            foreach (var c in selectResult)
            {
                foreach (var r in c)
                {
                    names1.Add(r.Name);
                }
            }


            // Solution 2:
            var names2 = new List<string>();
            var selectManyResult = dict.SelectMany(kvp => kvp.Value);
            foreach (var r in selectManyResult)
            {
                names2.Add(r.Name);
            }

            // Solution 3:
            var names3 =
                from kvp in dict
                from r in kvp.Value
                select r.Name;

//////////////////////////////////////////////////////////////////////////////////////////////
-------------------------------------------------------------------------------------------------
'Single Element Operators'
All single element operators don't have query expression (SQL-like) syntax.

ElementAt	Returns the element at a specified index in a collection.
ElementAtOrDefault	Returns the element at a specified index in a collection or a default value if the index is out of range.
example:

 int[] a1 = { 0, 1, 2 };
            string[] a2 = { "Tim", "Tom", "Rina" };
            var dv1 = a1.ElementAtOrDefault(3);
            var dv2 = a2.ElementAtOrDefault(3);
            System.Console.WriteLine(dv1 == 0);
            System.Console.WriteLine(dv2 == null);

/////////////////////////////////////////////////////////////////////////////////////////////////////////



First	Returns the first element of a collection, or the first element that satisfies a condition.
FirstOrDefault	Returns the first element of a collection, or the first element that satisfies a condition. Returns a default value if no such element exists.
Last	Returns the last element of a collection, or the last element that satisfies a condition.
LastOrDefault	Returns the last element of a collection, or the last element that satisfies a condition. Returns a default value if no such element exists.
Single	Returns the only element of a collection, or the only element that satisfies a condition.
SingleOrDefault	Returns the only element of a collection, or the only element that satisfies a condition. Returns a default value if no such element exists or the collection does not contain exactly one element.

Examples:
  string[] names = { "Andrew", "Tim", "Tom", "Rina" };
            var eAt3 = names.ElementAt(3);
            // var eAt4 = array.ElementAt(4);
            var head = names.First();
            var firstT = names.First(n => n.StartsWith("T"));
            // var firstX = array.First(n => n.StartsWith("X"));
            var tail = names.Last();
            var lastT = names.Last(n => n.StartsWith("T"));
            // var lastX = names.Last(n => n.StartsWith("X"));
            // var onlyOne = names.Single();
            var singleA = names.Single(n => n.StartsWith("A"));
            // var singleT = names.Single(n => n.StartsWith("T"));
            // var singleX = names.Single(n => n.StartsWith("X"));
            Console.WriteLine($"{eAt3}, {head}, {firstT}, {tail}, {lastT}, {singleA}");
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////     

'Partitioning operations'

Partitioning in LINQ refers to the operation of dividing the source collection into two sections and then returning one of the sections.

All of the partitioning operators don't have a query expression (SQL-like) syntax

Skip - Skips elements up to a specified position in the source collection.
Take - Takes elements up to a specified position in the source collection.
TakeLast - Takes the specified number of elements at the tail of the source collection.

examples:

 string[] source = { "A1", "A2", "B1", "B2", "C1", "C2" };
            var r1 = source.Take(3);
            var r2 = source.Take(100);
            var r3 = source.Skip(2);
            var r4 = source.Skip(100);
            var r5 = source.Skip(2).Take(2);
            var r6 = source.TakeLast(2);
            var r7 = source.TakeLast(100);

            Console.WriteLine(String.Join(",", r1));
            Console.WriteLine(String.Join(",", r2));
            Console.WriteLine(String.Join(",", r3));
            Console.WriteLine(String.Join(",", r4));
            Console.WriteLine(String.Join(",", r5));
            Console.WriteLine(String.Join(",", r6));
            Console.WriteLine(String.Join(",", r7));




SkipWhile - Skips elements until an element does not satisfy the condition.
TakeWhile - Takes elements until an element does not satisfy the condition.

string[] source = { "A1", "B1", "C1", "A2", "B2", "C2" };
            var r1 = source.TakeWhile(e => e.StartsWith("A"));
            var r2 = source.TakeWhile(e => !e.StartsWith("C"));
            var r3 = source.TakeWhile(e => e.StartsWith("C"));
            var r4 = source.SkipWhile(e => e.StartsWith("A"));
            var r5 = source.SkipWhile(e => !e.StartsWith("C"));
            var r6 = source.SkipWhile(e => e.StartsWith("C"));

            Console.WriteLine(String.Join(",", r1));
            Console.WriteLine(String.Join(",", r2));
            Console.WriteLine(String.Join(",", r3));
            Console.WriteLine(String.Join(",", r4));
            Console.WriteLine(String.Join(",", r5));
            Console.WriteLine(String.Join(",", r6));
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
----------------------------------------------------------------------------------------------------------------

'Generations operataions'

Generation operation refers to creating a new collection of values. There are four standard query operators in this group. All of them don't have query expression (SQL-like) syntax:

The repeat and range operators,
examples:
var r1 = Enumerable.Repeat("Hello", 5);
            var r2 = Enumerable.Range(0, 10);
            var r3 = Enumerable.Range(0, 10).Select(e => Math.Pow(2, e));
            var r4 = Enumerable.Range('A', 26).Select(e => (char)e);

            Console.WriteLine(String.Join(",", r1));
            Console.WriteLine(String.Join(",", r2));
            Console.WriteLine(String.Join(",", r3));
            Console.WriteLine(String.Join(",", r4));

The Empty Operator
We can use Empty operator to generate an empty collection instead of using new operator to create a List instance.

 static void Main(string[] args) {
            var r1 = Range(0, 9);
            var r2 = Range(9, 0);

            Console.WriteLine(String.Join(",", r1));
            Console.WriteLine(String.Join(",", r2));
        }

        static IEnumerable<int> Range(int start, int end) {
            if (start <= end) {
                return Enumerable.Range(start, end - start + 1);
            } else {
                return Enumerable.Empty<int>();
            }
        }

The DefaultIfEmpty

var defaultGift = "Programming Books";
            string[] wishlist = { "Toy Car", "Video Games", "Skateboard" };
            string[] storeInventory = { "Computer", "Candy", "Flowers" };
            var iGot = wishlist.Intersect(storeInventory).DefaultIfEmpty(defaultGift);

            foreach (var gift in iGot) {
                System.Console.WriteLine(gift);
            }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
----------------------------------------------------------------------------------------------------------------------------

'The Data type conversion operations'

Data type conversion is a very useful group of operations that convert the type of the source collection or convert the type of the elements of the source collection.

The cast operator

static void Main(string[] args) {
            var arrayList = new ArrayList() { 100, 200, 300, 400 };
            var nums = arrayList.Cast<int>();
            System.Console.WriteLine(nums is IEnumerable<int>);
            System.Console.WriteLine(String.Join(",", nums));
        }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

'The ToList, ToArray, ToHashSet, ToDictionary and ToLookup Operators'

 var maleTop100 = records
                .Where(r => r.Rank <= 100 && r.Gender == Gender.Male);
            var list = maleTop100.ToList();
            var array = maleTop100.ToArray();
            var set = maleTop100.ToHashSet();
            var dict = maleTop100.ToDictionary(r => r.Name, r => r.Rank);
            var lookup = maleTop100.ToLookup(r => (r.Rank - 1) / 10, r => r.Name);

            // Check collection type
            System.Console.WriteLine(maleTop100.GetType());
            System.Console.WriteLine(list.GetType());
            System.Console.WriteLine(array.GetType());
            System.Console.WriteLine(set.GetType());
            System.Console.WriteLine(dict.GetType());
            System.Console.WriteLine(lookup.GetType());
            System.Console.WriteLine(lookup.First().GetType());

            System.Console.WriteLine("=======================");

            // Check values
            System.Console.WriteLine(dict["Timothy"]);
            System.Console.WriteLine(String.Join(",", lookup[0]));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------------------------------------------------------------------------------------------------------------

'The equality operation'

Sequence equal
There is only one operator, SequenceEqual, in this group. It determines whether two collections are equal by comparing elements in a pair-wise manner

example 

static void Main(string[] args) {
            var array = new int[] { 0, 1, 2, 3, 4, 5 };
            var list = new List<int> { 0, 1, 2, 3, 4, 5 };
            var set = new HashSet<int> { 0, 1, 2, 3, 3, 2, 1, 4, 5 };
            var r1 = array.SequenceEqual(list);
            var r2 = array.SequenceEqual(set);
            System.Console.WriteLine(r1);
            System.Console.WriteLine(r2);
        }

Customized Comparer for SequenceEqual

  class StringEqualityComparer : IEqualityComparer<string> {
        public bool Equals(string x, string y) {
            return String.Compare(x, y, true) == 0;
        }

        public int GetHashCode(string obj) {
            return obj.GetHashCode();
        }
    }

    class Program {
        static void Main(string[] args) {
            string[] lower = { "aaa", "bbb", "ccc" };
            string[] upper = { "AAA", "BBB", "CCC" };
            var r1 = lower.SequenceEqual(upper);
            var r2 = lower.SequenceEqual(upper, new StringEqualityComparer());
            System.Console.WriteLine(r1);
            System.Console.WriteLine(r2);
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------------------------------------------

'Aggreation operation'
An aggregation operation computes a single value from a collection of values. The built-in standard aggregation operations include Max,
 Min, Count, LongCount, Sum, and Average. In addition to these aggregation operations,
 we can use Aggregate to perform a custom aggregation operation, for example, to calculate the variance, on the values of a collection.
Example:

double[] source = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 };
            var max = source.Max();
            var min = source.Min();
            var sum = source.Sum();
            var count = source.Count();
            var longCount = source.LongCount();
            var avg = source.Average();
            var result = source
                .Aggregate((variance: 0.0, avg: source.Average(), count: source.Count()),
                (acc, e) => {
                    acc.variance += Math.Pow(e - acc.avg, 2) / acc.count;
                    return acc;
                });

            Console.WriteLine($"{max.GetType().Name} {max}");
            Console.WriteLine($"{min.GetType().Name} {min}");
            Console.WriteLine($"{sum.GetType().Name} {sum}");
            Console.WriteLine($"{count.GetType().Name} {count}");
            Console.WriteLine($"{longCount.GetType().Name} {longCount}");
            Console.WriteLine($"{avg.GetType().Name} {avg}");
            Console.WriteLine($"{result.variance.GetType().Name} {result.variance}");
        }


////////////////////////////////////////////////////////////////////////////////////////////////////
----------------------------------------------------------------------------------------------------


'Grouping operation'

A grouping operation puts data into groups so that the elements in each group share a common key.

 var records = DataLoader.Load(@"C:\Projects");
            var femaleTop30 = records
                .Where(r => r.Rank <= 30 && r.Gender == Gender.Female)
                .OrderBy(r => r.Name);

            var groups1 = femaleTop30.GroupBy(r => r.Name[0]);
            var groups2 = from r in femaleTop30 group r by r.Name[0];

            var groups3 = femaleTop30.GroupBy(r => r.Name[0], r => r.Name);
            var groups4 = from r in femaleTop30 group r.Name by r.Name[0];

            foreach (var g in groups3) {
                Console.WriteLine($"Key:{g.Key} Count:{g.Count()} Names:{String.Join(",", g)}");
            }

    var records = DataLoader.Load(@"C:\Projects");
var femaleTop30 = records
    .Where(r => r.Rank <= 30 && r.Gender == Gender.Female)
    .OrderBy(r => r.Name);

var result1 = femaleTop30.GroupBy(r => r.Name[0], r => r.Name)
    .Select(g => (Key: g.Key, Count: g.Count(), Names: String.Join(",", g)));

var result2 = from r in femaleTop30 group r.Name by r.Name[0] into g
                select (Key: g.Key, Count: g.Count(), Names: String.Join(",", g));

foreach (var e in result1) {
    Console.WriteLine($"Key:{e.Key} Count:{e.Count} Names:{e.Names}");
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
----------------------------------------------------------------------------------------------------------

